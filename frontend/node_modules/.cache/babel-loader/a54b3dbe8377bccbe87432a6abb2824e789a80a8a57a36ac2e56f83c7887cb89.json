{"ast":null,"code":"// src/services/userService.js\nimport { auth, db } from '../Config/firebase';\nimport { doc, setDoc, getDoc, collection, query, where, getDocs, updateDoc } from 'firebase/firestore';\n\n// Create a new user in Firestore\nexport const createUserProfile = async (uid, userData) => {\n  try {\n    const userRef = doc(db, \"Users\", uid);\n    await setDoc(userRef, {\n      email: userData.email,\n      username: userData.username,\n      skills: {\n        dribbling: 0,\n        shooting: 0,\n        passing: 0,\n        defending: 0,\n        speed: 0,\n        stamina: 0\n      },\n      createdAt: new Date(),\n      level: 1,\n      xp: 0\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error creating user profile:\", error);\n    throw error;\n  }\n};\n\n// Get user profile data\nexport const getUserProfile = async uid => {\n  try {\n    const userRef = doc(db, \"Users\", uid);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error getting user profile:\", error);\n    throw error;\n  }\n};\n\n// Update the UID of a user document\nexport const updateUserUid = async (tempUid, newUid) => {\n  try {\n    const userRef = doc(db, \"Users\", tempUid);\n    await updateDoc(userRef, {\n      uid: newUid\n    });\n\n    //Move the document to a new location with the correct UID\n    const newUserRef = doc(db, \"Users\", newUid);\n    const userDoc = await getDoc(userRef);\n    if (userDoc.exists()) {\n      await setDoc(newUserRef, userDoc.data());\n      await deleteDoc(userRef); // Delete the old document\n    }\n    return true;\n  } catch (error) {\n    console.error(\"Error updating user UID:\", error);\n    throw error;\n  }\n};\n\n// Check if username is available\nexport const isUsernameAvailable = async username => {\n  try {\n    const usersRef = collection(db, \"Users\");\n    const q = query(usersRef, where(\"username\", \"==\", username));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.empty; // Returns true if username is available\n  } catch (error) {\n    console.error(\"Error checking username availability:\", error);\n    throw error;\n  }\n};\n\n// Update user skills\nexport const updateUserSkills = async (uid, skills) => {\n  try {\n    const userRef = doc(db, \"Users\", uid);\n    await updateDoc(userRef, {\n      skills\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error updating user skills:\", error);\n    throw error;\n  }\n};\n\n// Update user XP and level\nexport const updateUserProgress = async (uid, xp, level) => {\n  try {\n    const userRef = doc(db, \"Users\", uid);\n    await updateDoc(userRef, {\n      xp,\n      level\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error updating user progress:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["auth","db","doc","setDoc","getDoc","collection","query","where","getDocs","updateDoc","createUserProfile","uid","userData","userRef","email","username","skills","dribbling","shooting","passing","defending","speed","stamina","createdAt","Date","level","xp","error","console","getUserProfile","userDoc","exists","data","updateUserUid","tempUid","newUid","newUserRef","deleteDoc","isUsernameAvailable","usersRef","q","querySnapshot","empty","updateUserSkills","updateUserProgress"],"sources":["C:/Users/ndoug/Desktop/Footsies/frontend/src/Services/userService.js"],"sourcesContent":["// src/services/userService.js\r\nimport { auth, db } from '../Config/firebase';\r\nimport { \r\n  doc, \r\n  setDoc, \r\n  getDoc, \r\n  collection, \r\n  query, \r\n  where, \r\n  getDocs,\r\n  updateDoc\r\n} from 'firebase/firestore';\r\n\r\n// Create a new user in Firestore\r\nexport const createUserProfile = async (uid, userData) => {\r\n  try {\r\n    const userRef = doc(db, \"Users\", uid);\r\n    await setDoc(userRef, {\r\n      email: userData.email,\r\n      username: userData.username,\r\n      skills: {\r\n        dribbling: 0,\r\n        shooting: 0,\r\n        passing: 0,\r\n        defending: 0,\r\n        speed: 0,\r\n        stamina: 0\r\n      },\r\n      createdAt: new Date(),\r\n      level: 1,\r\n      xp: 0\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error creating user profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get user profile data\r\nexport const getUserProfile = async (uid) => {\r\n  try {\r\n    const userRef = doc(db, \"Users\", uid);\r\n    const userDoc = await getDoc(userRef);\r\n    \r\n    if (userDoc.exists()) {\r\n      return userDoc.data();\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error getting user profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update the UID of a user document\r\nexport const updateUserUid = async (tempUid, newUid) => {\r\n  try {\r\n    const userRef = doc(db, \"Users\", tempUid);\r\n    await updateDoc(userRef, { uid: newUid });\r\n\r\n    //Move the document to a new location with the correct UID\r\n    const newUserRef = doc(db, \"Users\", newUid);\r\n    const userDoc = await getDoc(userRef);\r\n    if (userDoc.exists()) {\r\n      await setDoc(newUserRef, userDoc.data());\r\n      await deleteDoc(userRef); // Delete the old document\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error updating user UID:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check if username is available\r\nexport const isUsernameAvailable = async (username) => {\r\n  try {\r\n    const usersRef = collection(db, \"Users\");\r\n    const q = query(usersRef, where(\"username\", \"==\", username));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.empty; // Returns true if username is available\r\n  } catch (error) {\r\n    console.error(\"Error checking username availability:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update user skills\r\nexport const updateUserSkills = async (uid, skills) => {\r\n  try {\r\n    const userRef = doc(db, \"Users\", uid);\r\n    await updateDoc(userRef, { skills });\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error updating user skills:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update user XP and level\r\nexport const updateUserProgress = async (uid, xp, level) => {\r\n  try {\r\n    const userRef = doc(db, \"Users\", uid);\r\n    await updateDoc(userRef, { xp, level });\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error updating user progress:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}